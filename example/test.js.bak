var convnetjs = require('../src/index')

net = new convnetjs.Net();

var layer_defs = [];
layer_defs.push({type:'input', out_sx:1, out_sy:1, out_depth:2});
layer_defs.push({type:'fc', num_neurons:5, activation:'tanh'});
layer_defs.push({type:'fc', num_neurons:5, activation:'tanh'});
layer_defs.push({type:'softmax', num_classes:3});
net.makeLayers(layer_defs);

trainer = new convnetjs.SGDTrainer(net, {learning_rate:0.0001, momentum:0.0, batch_size:1, l2_decay:0.0});

/*
expect(net.layers.length).to.equal(7)

var x = new convnetjs.Vol([0.2, -0.3]);
var probability_volume = net.forward(x);

expect(probability_volume.w.length).to.equal(3); // 3 classes output
var w = probability_volume.w;
for(var i=0;i<3;i++) {
  expect(w[i]).toBeGreaterThan(0);
  expect(w[i]).toBeLessThan(1.0);
}
expect(w[0]+w[1]+w[2]).to.be.closeTo(1.0);
*/